yitzstrum
danielalfia

File description:
Package oop.ex6:

package main:
Sjavac: Main class which runs the program

Package parser:
BadLineException: Exception class, inherits from Exception and is thrown when there is a syntax error.
DeclarationParser: The declaration parser class parses variable assignment and declaration lines,
                   the class inherits from Parser.
FileParser: The class is in charge of reading the file and inserting its lines into a List of Strings
MethodCallParser: The class is in charge of parsing a method call line, the class inherits from Parser.
MethodDeclarationParser: The class is in charge of parsing a method declaration line,
                         the class inherits from Parser.
Parser: the class is an abstract class and it contains all of the needed regex's for the different parser classes
Token: The class is in charge of creating a token from a single line and checking its syntax,
       the class inherits from Parser.
Tokenizer: The class runs is in charge of the pre processing of the code (in order to save the global variables as
           well as the method properties) and the validation of the entire code.

Package SymbolTable:
MethodSymbolTable: The class represents a symbol table for the programs methods,
                   the class inherits from HashMap<String, List<VariableData>> (typedef)
VariableData: The class represents a single variable, it consists of its type and modifier
VariableSymbolTable: The class represents a symbol table for the programs variables,
                     the class inherits from HashMap<String, VariableData> (typedef)

Package Utils:
Pair: The class represents a pair which has two generic values
Utils: The class holds utility function used across the program

Package verifier:
BadLogicException: Exception class, inherits from Exception and is thrown when there is a logic error.
MethodCallVerifier: The class implements the Verifier interface and is in
                    charge of verifying the logic of a method call line.
MethodDeclarationVerifier: The class implements the Verifier interface and is in
                           charge of verifying the logic of a method declaration line.
VariableAssignmentVerifier: The class implements the Verifier interface and is in
                            charge of verifying the logic of a variable assignment line.
VariableDeclarationVerifier: The class implements the Verifier interface and is in
                             charge of verifying the logic of a variable declaration line.
Verifier: An interface for the verifiers, has one function called verify
VerifierManager: A factory class which is in charge of running each of the verifiers
WhileIfVerifierManager: The class implements the Verifier interface and is in
                        charge of verifying the logic of a if/while statement.

Design: The design of our program divides into two main components, the first is to validate the syntax of the given
        file and the second id the validate the logic of the sjava class. the first part is handled by the parser
        package and the second is handled by the verifier package.
        in the parser package we understood the all of the parsers will need to use similar regex's therefore we create
        the abstract class Parser (we decided to make it abstract because there is no reason to create an instance of
        that class) which hold all of the regex's and the different parser classes inherit from it.
        In the verifier package we decided to make use of the factory design pattern, where the VerifierManeger will
        decide for each given token which verifier will handle it. The reason we chose the implement a Factory was
        that we wanted that our verifier to have one place where it decides which verifier to run
        (Single Choice principle) and that it would be easy to add new verifiers in the future
        (Modularity and the open-close principle).

Implementation Issues: One of the issues we encountered was that we needed to know if we where within a method or not
                       and handle it accordingly, the solution we used is that we don't call the verifierManager for
                       every token from the same location. We divided it up between calls made from the global scope
                       and calls made from within a function, that way we could handle each case accordingly

Error Handling: First we thought to design out code using boolean validation functions, which upon failing would
                return 'false' to the calling method. When we thought it through we decided that using the method would
                limit us to not understanding the reason for each fail and on what line did the program fail exactly.
                Therefore we decided to implement the error handling using exceptions, we implemented two types of
                exceptions, one for a syntax error and one for a logic error.
                The benefit of using the exceptions is that when the program fails we are able to catch the exact line
                where the program fails and give it us a parameter to the exception instance we created and that way
                when we catch the exception in the main method we are able to give the user a described message for the
                reason that his program failed

Code modifications: In order to add new types of variables we would need to modify our code in two locations, the first
                    is to add the new type to the VariableData enum Type, and the second is to handle the new type in
                    declaration parser.

                    In order to add different return type all we need to do is add a verifier for the return statement
                    which all it needs to do is validate that the return value is legal when comparing to the methods
                    symbol table. after adding the verifier we will add a case to the VerifierManager Factory.

                    In order to add support for the methods of the standard java library all we need to do is hold a
                    set of all the legal methods and when we parse the syntax of the program we will add a case
                    (in the Token class) which checks if the given line is a method from the standard java.
                    handling the logic of those methods will be done in the same way we verify a regular method call.

Regex: Two main regex's we used in our code:
       1. "^\s*(final\s+)?\s*(int|double|String|boolean|char)\s*\s+(_+[\w]|[a-zA-Z])[\w]*\s*":
          we used this regex in order to validate the syntax of a variable written in the code, we validated the
          following components of the variable, it might be final, it must have a valid type and that the variable
          name must be valid.
       2. "((_+[\w]|[a-zA-Z])[\w]*|(-?\d+(\.\d+)?)|'[^'].*'|\s*"[^"].*"\s*|true|false)":
          we used the above regex in order to validate that the values sent in a method call are valid.




Test-files:
1 - Description: a function with no return statement
    Outcome: Fail
2 - Description: Invalid method name
    Outcome: Fail
3 - Description: Syntax error, no semi-collen after return
    Outcome: Fail
4 - Description: Syntax error, method declaration doesn't start with void
    Outcome: Fail
5 - Description: comment line starts with a space
    Outcome: Fail
6 - Description: Variable assignment without being declared
    Outcome: Fail
7 - Description: Variable declared twice in the same scope
    Outcome: Fail
8 - Description: method called with wrong number of values
    Outcome: Fail
9 - Description: method called with wrong value type
    Outcome: Fail
10 - Description: Wrong variable assignment type
     Outcome: Fail
11 - Description: Variable override within function
     Outcome: Success
12 - Description: Recursive call
     Outcome: Success
13 - Description: Reserved word as variable name
     Outcome: Fail
14 - Description: Method called in global scope
     Outcome: Fail
15 - Description: Syntax error in 'if' condition
     Outcome: Fail
16 - Description: 'if' statement can receive constant numbers
     Outcome: Success
17 - Description: final variable can't be modified
     Outcome: Fail
18 - Description: final variable declaration must be initialized
     Outcome: Fail
19 - Description: a method may receive a non final variable to a final variable
     Outcome: Success
20 - Description: a method may not receive a not assigned variable
     Outcome: Fail